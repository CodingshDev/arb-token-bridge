/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers'
import { Listener, Provider } from 'ethers/providers'
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils'
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.'

interface ERC721Interface extends Interface {
  functions: {
    supportsInterface: TypedFunctionDescription<{
      encode([interfaceId]: [Arrayish]): string
    }>

    name: TypedFunctionDescription<{ encode([]: []): string }>

    getApproved: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string
    }>

    approve: TypedFunctionDescription<{
      encode([to, tokenId]: [string, BigNumberish]): string
    }>

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>

    transferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string
    }>

    tokenOfOwnerByIndex: TypedFunctionDescription<{
      encode([owner, index]: [string, BigNumberish]): string
    }>

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string
    }>

    tokenByIndex: TypedFunctionDescription<{
      encode([index]: [BigNumberish]): string
    }>

    ownerOf: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string
    }>

    baseURI: TypedFunctionDescription<{ encode([]: []): string }>

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>

    symbol: TypedFunctionDescription<{ encode([]: []): string }>

    setApprovalForAll: TypedFunctionDescription<{
      encode([to, approved]: [string, boolean]): string
    }>

    tokenURI: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string
    }>

    isApprovedForAll: TypedFunctionDescription<{
      encode([owner, operator]: [string, string]): string
    }>

    tokensOfOwner: TypedFunctionDescription<{
      encode([owner]: [string]): string
    }>
  }

  events: {
    Transfer: TypedEventDescription<{
      encodeTopics([from, to, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[]
    }>

    Approval: TypedEventDescription<{
      encodeTopics([owner, approved, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[]
    }>

    ApprovalForAll: TypedEventDescription<{
      encodeTopics([owner, operator, approved]: [
        string | null,
        string | null,
        null
      ]): string[]
    }>
  }
}

export class ERC721 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ERC721
  attach(addressOrName: string): ERC721
  deployed(): Promise<ERC721>

  on(event: EventFilter | string, listener: Listener): ERC721
  once(event: EventFilter | string, listener: Listener): ERC721
  addListener(eventName: EventFilter | string, listener: Listener): ERC721
  removeAllListeners(eventName: EventFilter | string): ERC721
  removeListener(eventName: any, listener: Listener): ERC721

  interface: ERC721Interface

  functions: {
    supportsInterface(interfaceId: Arrayish): Promise<boolean>

    name(): Promise<string>

    getApproved(tokenId: BigNumberish): Promise<string>

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    totalSupply(): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    tokenOfOwnerByIndex(owner: string, index: BigNumberish): Promise<BigNumber>

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    tokenByIndex(index: BigNumberish): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish): Promise<string>

    baseURI(): Promise<string>

    balanceOf(owner: string): Promise<BigNumber>

    symbol(): Promise<string>

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>

    tokenURI(tokenId: BigNumberish): Promise<string>

    isApprovedForAll(owner: string, operator: string): Promise<boolean>

    tokensOfOwner(owner: string): Promise<BigNumber[]>
  }

  supportsInterface(interfaceId: Arrayish): Promise<boolean>

  name(): Promise<string>

  getApproved(tokenId: BigNumberish): Promise<string>

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  totalSupply(): Promise<BigNumber>

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  tokenOfOwnerByIndex(owner: string, index: BigNumberish): Promise<BigNumber>

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  tokenByIndex(index: BigNumberish): Promise<BigNumber>

  ownerOf(tokenId: BigNumberish): Promise<string>

  baseURI(): Promise<string>

  balanceOf(owner: string): Promise<BigNumber>

  symbol(): Promise<string>

  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>

  tokenURI(tokenId: BigNumberish): Promise<string>

  isApprovedForAll(owner: string, operator: string): Promise<boolean>

  tokensOfOwner(owner: string): Promise<BigNumber[]>

  filters: {
    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter

    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter
  }

  estimate: {
    supportsInterface(interfaceId: Arrayish): Promise<BigNumber>

    name(): Promise<BigNumber>

    getApproved(tokenId: BigNumberish): Promise<BigNumber>

    approve(to: string, tokenId: BigNumberish): Promise<BigNumber>

    totalSupply(): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish
    ): Promise<BigNumber>

    tokenOfOwnerByIndex(owner: string, index: BigNumberish): Promise<BigNumber>

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish
    ): Promise<BigNumber>

    tokenByIndex(index: BigNumberish): Promise<BigNumber>

    ownerOf(tokenId: BigNumberish): Promise<BigNumber>

    baseURI(): Promise<BigNumber>

    balanceOf(owner: string): Promise<BigNumber>

    symbol(): Promise<BigNumber>

    setApprovalForAll(to: string, approved: boolean): Promise<BigNumber>

    tokenURI(tokenId: BigNumberish): Promise<BigNumber>

    isApprovedForAll(owner: string, operator: string): Promise<BigNumber>

    tokensOfOwner(owner: string): Promise<BigNumber>
  }
}
